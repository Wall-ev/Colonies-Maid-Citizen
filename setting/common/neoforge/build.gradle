// 调用的 gradle 插件
plugins {
    id 'java-library'

    // 用于 eclipse 或者 idea 的插件
    id 'eclipse'
    id 'idea'

    // NeoForged 开发插件
    id 'net.neoforged.moddev' version '2.0.78'
}

// 加载配置
loadProperties()
loadGradle()

// Java版本
// [21,)
java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

// 版本类型: beta alpha release
String version_type = "beta"

// 模组基础信息
base {
    archivesName = mod_id
    version = "${minecraft_version}-${version_type}-v${mod_version}"
    group = mod_group_id
}

neoForge {
    // NeoForge 版本信息
    version = project.neo_version

    // 反混淆表
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // 运行部分
    runs {
        client {
            client()
            gameDirectory = project.file('run/client')
            programArguments = [
                    "--username", "albert_cat"
            ]
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            gameDirectory = project.file('run/server')
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            gameDirectory = project.file('run/gameTestServer')
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            gameDirectory = project.file('run/data')
            programArguments.addAll '--mod', project.mod_id, '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main {
    resources {
        srcDir 'src/generated/resources'
    }
}

tasks.compileJava {
    // dsx137: 强制重新编译和生成 refmap.json 文件，避免偶发情况下该文件丢失问题
    outputs.upToDateWhen { false }
}

// 用于 neoforge.mods 里替换那一堆 ${xxxx}
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// 生成 manifest 内容，用于填充版本信息等内容
jar {
    manifest {
        attributes([
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}"
        ])
    }
}

// 必须，编码需要显式指定为 UTF
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// 让 idea 主动下载前置库的源码和 Javadoc
// 新版本 idea 默认不会下载这两个，这虽然加快了构建速度，但是不方便调试
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// libs自动依赖
dependencies {
    if (file("libs/${minecraft_version}/implementation").exists()) {
        implementation fileTree(dir: "Settings/libs/${minecraft_version}/implementation", includes: ['*.jar'])
    }
    if (file("libs/${minecraft_version}/compileOnly").exists()) {
        compileOnly fileTree(dir: "Settings/libs/${minecraft_version}/compileOnly", includes: ['*.jar'])
    }
    if (file("libs/${minecraft_version}/runtimeOnly").exists()) {
        runtimeOnly fileTree(dir: "Settings/libs/${minecraft_version}/runtimeOnly", includes: ['*.jar'])
    }
}

// util
def loadGradle() {
    apply from: "Settings/setting/common/${mod_loader}/repositories.gradle"
    apply from: "Settings/setting/common/${mod_loader}/dependencies.gradle"
    apply from: "Settings/setting/version/${minecraft_version}-${mod_loader}/dependencies.gradle"
}

def loadProperties() {
    loadCustomProperties("Settings/gradle.properties")
    loadCustomProperties("Settings/setting/version/${minecraft_version}-${mod_loader}/gradle.properties")

    println("> loadProperties.enable_log: ${enable_log} \n")
    if (Boolean.valueOf(enable_log)) {
        printProjectInfo()
        printProperties()
    }
}

def loadCustomProperties(String path) {
    def customPropertiesFile = file(path)
    if (customPropertiesFile.exists()) {
        def customProperties = new Properties()
        customProperties.load(new FileInputStream(customPropertiesFile))
        customProperties.each { key, value ->
            project.ext.set(key, value)
        }
    }
}

def printProjectInfo() {
    String[] projectInfo = ['minecraft_version',
                            'minecraft_version_range',
                            "${mod_loader}_version",
                            "${mod_loader}_version_range",
                            'loader_version',
                            'loader_version_range',
                            'mapping_channel',
                            'mapping_version']
    println "> Minecraft Version"
    for (final def info in projectInfo) {
        if (project.hasProperty(info)) {
            println ">- ${info} = ${project.property(info)}"
        }
    }
    println ""
}

def printProperties() {
    println "> Custom Properties"
    project.properties.each { key, value ->
        println ">- ${key} = ${value}"
    }
    println ""
}