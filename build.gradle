buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

// 插件配置
plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    // This should be below the net.minecraftforge.gradle plugin
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    // Mixin Plugin
    id 'org.spongepowered.mixin' version '0.7.+'
}

// 加载配置
// [,1.21)
def minecraft_version= "1.18.2"
loadProperties(minecraft_version)
loadGradle(minecraft_version)

// Java版本
// [,17]
java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

// 版本类型: beta alpha release
String version_type = "beta"

// 模组基础信息
base {
    archivesName = mod_id
    version = "${minecraft_version}-${version_type}-v${mod_version}"
    group = mod_group_id
}

// MC 配置
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Mixin 配置
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

// 自动导入自动生成的资源(resources)
sourceSets.main.resources { srcDir 'src/generated/resources' }

// 生成 toml 信息，用于打包成生产环境的mod
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,

            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// 生成 manifest 内容，用于打包时填充版本信息等内容
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// 指定编码显式为 UTF
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// ALL 为下载 gradle 源码，方便查看调试
tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.ALL
}

// 基础配置
dependencies {
    // 本体
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.0")) {
        jarJar.ranged(it, "[0.4.0,)")
    }
}

// libs自动依赖
dependencies {
    if (file("libs/${minecraft_version}/implementation").exists()) {
        implementation fileTree(dir: "libs/${minecraft_version}/implementation", includes: ['*.jar'])
    }
    if (file("libs/${minecraft_version}/compileOnly").exists()) {
        compileOnly fileTree(dir: "libs/${minecraft_version}/compileOnly", includes: ['*.jar'])
    }
    if (file("libs/${minecraft_version}/runtimeOnly").exists()) {
        runtimeOnly fileTree(dir: "libs/${minecraft_version}/runtimeOnly", includes: ['*.jar'])
    }
}

// util
def loadGradle(String minecraft_version) {
    apply from: "/setting/common/forge/repositories.gradle"
    apply from: "/setting/common/forge/dependencies.gradle"
    apply from: "/setting/version/${minecraft_version}/dependencies.gradle"
}

def loadProperties(String minecraft_version) {
    loadCustomProperties("/gradle.properties")
    loadCustomProperties("/setting/version/${minecraft_version}/gradle.properties")
}

def loadCustomProperties(String path) {
    def customPropertiesFile = file(path)
    if (customPropertiesFile.exists()) {
        def customProperties = new Properties()
        customProperties.load(new FileInputStream(customPropertiesFile))
        customProperties.each { key, value ->
            project.ext.set(key, value)
        }
    }
}

def printProjectInfo(Project project) {
    String[] projectInfo = ['minecraft_version', 'minecraft_version_range', 'forge_version', 'forge_version_range', 'loader_version', 'loader_version_range', 'mapping_channel', 'mapping_version']
    println "> Minecraft Version"
    for (final def info in projectInfo) {
        if (project.hasProperty(info)) {
            println "${info} = ${project.property(info)}"
        }
    }
}

def printProperties(Project project) {
    println "> Custom Properties"
    project.properties.each { key, value ->
        println ">- ${key} = ${value}"
    }
}